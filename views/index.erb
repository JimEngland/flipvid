<html>

<head>
  <!--[if lt IE 9]>
    <script src="public/js/html5shiv.js"></script>
  <![endif]-->

  <link href='http://fonts.googleapis.com/css?family=Lato' rel='stylesheet' type='text/css'>
  <link rel="stylesheet" type="text/css" href="style.css">

  <title>Flipvid</title>

</head>

<body>

  <nav>
    <ul class="links">
      <li id="animal" class="link selected" onClick="changeChannel('animal')">Animals</li>
      <li id="history" class="link" onClick="changeChannel('history')">History</li>
      <li id="nature" class="link" onClick="changeChannel('nature')">Nature</li>
    </ul>
  </nav>
  <article>
    <section class="title-block">
      <h2 class="source">flipvid</h2>
      <h3 class="title">Flip through videos and find something to watch</h3>
    </section>

    <section class="video-block">

      <div id="player">Loading...</div>
    </section>

    <a href="javascript:player.next();" class="next"></div>

  </article>


  <script>
    // 2. This code loads the IFrame Player API code asynchronously.
    var tag = document.createElement('script');

    tag.src = "https://www.youtube.com/iframe_api";
    var firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

    // 3. This function creates an <iframe> (and YouTube player)
    //    after the API code downloads.
    var player;

    var channel = "animal";
 
    var animalVideosCount = 1;
    var animalVideos = new Array();
    animalVideos[0] = 'wSFB2ytWJLQ' // Sleepy Baby Bunny
    animalVideos[1] = '-ZPAL8ja6mo' // Cheesecake and her adopted pups
    animalVideos[2] = '0JkV4QfLH0c' // Lily the lionhead bunny
    animalVideos[3] = '3x2kTS4cZ18' // Soori the meerkat nodding off!
    animalVideos[4] = 'OcTb3okx_xs' // Boo the cutest Dog !
    animalVideos[5] = '2Tgwrkk-B3k' // wolf howl
    animalVideos[6] = '5L28TM48bF0' // Puppy Can't get up    
    animalVideos[7] = '2Tgwrkk-B3k' // Chuckles the Red Fox
    animalVideos[8] = 'ptyKSiRyQ4Y' // Danish Championships 2010 in Rabbit Hopping
    animalVideos[9] = '4TQ7DDnr1yo' // Chris P Bacon - Play Time HD
    animalVideos[10] = '-SU3CwdvPEU' // Jump goat Jump
    animalVideos[11] = 'nN7YWz2RqH8' // English Bulldog Father meets daughter first time

    var historyVideosCount = 1;
    var historyVideos = new Array();
    historyVideos[0] = 'z_ZZog59Up0' // Ultimate Battles_King Porus ( of present day Punjab Pakistan ) vs Alexander the Great
    historyVideos[1] = 'T7U-b2rdtwQ' // Lost Cities of the Ancients 3 The Dark Lords of Hattusha.
    historyVideos[2] = 'JgALlSPlZC8' // The Book That Can't Be Read
    historyVideos[3] = 'au9Aqd_-2hc' // Inside the Saudi Kingdom (BBC Documentary)
    historyVideos[4] = 'VtxSeGkeyKk' // Terry Jones' Barbarians - The Savage Goths
    historyVideos[5] = 'qxgUMOCUK4A' // King Solomon's Tablet of Stone (BBC)
    historyVideos[6] = '58bPQG_SrHg' // Da Vinci - The Lost Treasure (BBC)
    historyVideos[7] = 'YQXPgoB1SsI' // Ancient Mysteries: The Quest for the Holy Lance
    historyVideos[8] = 'Om5SA6El3yA' // Constantine the Great
    historyVideos[9] = 'xnIvxXnFPnI' // The Ottomans - PBS documentary
    historyVideos[10] = 'vCVYF_XIfvk' // Byzantium, The Lost Empire: 1. Building the Dream
    historyVideos[11] = '_fdwyAprd6g' // How Christianity Spread Throughout The Roman Empire (Europe)

    var natureVideosCount = 1;
    var natureVideos = new Array();
    natureVideos[0] = '5DbGrnTaNLs'; // Wonders of the Galapagos
    natureVideos[1] = 'clSO7tewXBs'; // Wild Japan
    natureVideos[2] = 'v5TeapDEEM4'; // Jaguar Year of the Cat
    natureVideos[3] = 'EUyxzAulkGk'; // BBC Natural World - Cassowaries
    natureVideos[4] = 'gTihymde_sU'; // Natural World - The Lost Elephants Of Timbuktu
    natureVideos[5] = 'V3eMOE9nO_c'; // BBC Natural World - Madagascar Lemurs and Spies [HD]
    natureVideos[6] = 'EqdKqnNLs80'; // BBC Natural World Jaguars Born Free
    natureVideos[7] = 'nHOxXOeCI0Y'; // Natural World: Tiger Island (BBC) 
    natureVideos[8] = 'dw7f_9Hu9n8'; // Natural World - Danger In Tiger Paradise
    natureVideos[9] = 'fWtE4jT5c7o'; // Natural World: Himalayas (BBC)
    natureVideos[10] = 'p_KWVHixpEQ'; // Nature - Turtles & Tortoises
    natureVideos[11] = 'yw_wT61kViI'; // Nat Geo Wild : Crocodiles: Here Be Dragons

    function changeChannel(newChannel) {
      channel = newChannel;

      //Reset all counts
      animalVideosCount = 0;
      historyVideosCount = 0;
      natureVideosCount = 0;

      //remove all selected classNames
      document.getElementById('animal').className = "link";
      document.getElementById('history').className = "link";
      document.getElementById('nature').className = "link";

      if(channel == "animal") {
        player.loadVideoById({'videoId': animalVideos[animalVideosCount]});
        animalVideosCount++;
        document.getElementById('animal').className += " selected";
      }      
      if(channel == "history") {
        player.loadVideoById({'videoId': historyVideos[historyVideosCount]});
        historyVideosCount++;
        document.getElementById('history').className += " selected";
      }
      if(channel == "nature") {
        player.loadVideoById({'videoId': natureVideos[natureVideosCount]});
        natureVideosCount++;
        document.getElementById('nature').className += " selected";
      }



    }

    function onYouTubeIframeAPIReady() {
      player = new YT.Player('player', {
        height: '405',
        width: '720',
        videoId: animalVideos[0],
        playerVars: {
          //controls: '0',
          iv_load_policy: '3',
          showinfo: '0',
          modestbranding: '1'
        },
        events: {
          'onReady': onPlayerReady,
          'onStateChange': onPlayerStateChange
        }
      });
      player.next = function() { 

        if(channel == "animal") {
          player.loadVideoById({'videoId': animalVideos[animalVideosCount]});
          animalVideosCount = animalVideosCount + 1;
        }
        if(channel == "history") {
          player.loadVideoById({'videoId': historyVideos[historyVideosCount]});
          historyVideosCount = historyVideosCount + 1;
        }
        if(channel == "nature") {
          player.loadVideoById({'videoId': natureVideos[natureVideosCount]});
          natureVideosCount = natureVideosCount + 1;
        }        

      };
    }

    // 4. The API will call this function when the video player is ready.
    function onPlayerReady(event) {
      event.target.playVideo();
    }

    // 5. The API calls this function when the player's state changes.
    //    The function indicates that when playing a video (state=1),
    //    the player should play for six seconds and then stop.
    var done = false;
    function onPlayerStateChange(event) {
      //At end of video, load next video
      if (event.data == YT.PlayerState.ENDED) {
        event.target.next();
      }

      if (event.data == YT.PlayerState.PLAYING && !done) {        
        // setTimeout(function(){
        //   event.target.stopVideo();
        // },2000);

        done = true;
      }
    }

    // function next(){
    //   alert('hi!');
    //   player = document.getElementById('player');
    //   player.stopVideo();
    //   // player.event.target.loadVideoById({'videoId': videos[videoCount]});
    //   // videoCount = videoCount + 1;
    // }

  </script>

</body>

</html>